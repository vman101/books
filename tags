!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!C++	name	/aliased names/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!C	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C	m,member	/struct, and union members/
!_TAG_KIND_DESCRIPTION!C	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!C++	c,class	/classes/
!_TAG_KIND_DESCRIPTION!C++	d,macro	/macro definitions/
!_TAG_KIND_DESCRIPTION!C++	e,enumerator	/enumerators (values inside an enumeration)/
!_TAG_KIND_DESCRIPTION!C++	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!C++	g,enum	/enumeration names/
!_TAG_KIND_DESCRIPTION!C++	h,header	/included header files/
!_TAG_KIND_DESCRIPTION!C++	m,member	/class, struct, and union members/
!_TAG_KIND_DESCRIPTION!C++	n,namespace	/namespaces/
!_TAG_KIND_DESCRIPTION!C++	s,struct	/structure names/
!_TAG_KIND_DESCRIPTION!C++	t,typedef	/typedefs/
!_TAG_KIND_DESCRIPTION!C++	u,union	/union names/
!_TAG_KIND_DESCRIPTION!C++	v,variable	/variable definitions/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!C	0.0	/current.age/
!_TAG_PARSER_VERSION!C++	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/victor/code/main/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.0.0	/p6.0.20221218.0/
!_TAG_ROLE_DESCRIPTION!C!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!C++!header	local	/local header/
!_TAG_ROLE_DESCRIPTION!C++!header	system	/system header/
!_TAG_ROLE_DESCRIPTION!C++!macro	undef	/undefined/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
$(OBJDIR)/%.o	Makefile	/^$(OBJDIR)\/%.o: $(SRCDIR)\/%.c$/;"	t
$(OBJDIR)/%.o	test/Makefile	/^$(OBJDIR)\/%.o: $(SRCDIR)\/%.c$/;"	t
$(TARGET)	Makefile	/^$(TARGET): $(OBJS)$/;"	t
$(TARGET)	test/Makefile	/^$(TARGET): $(OBJS)$/;"	t
0	.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
0	.vscode/c_cpp_properties.json	/^        ""$/;"	s	array:configurations.0.compilerArgs
0	.vscode/c_cpp_properties.json	/^        "${workspaceFolder}\/**"$/;"	s	array:configurations.0.includePath
0	.vscode/c_cpp_properties.json	/^    {$/;"	o	array:configurations
0	.vscode/launch.json	/^        {$/;"	o	array:configurations.0.setupCommands
0	.vscode/launch.json	/^      "args": [2],$/;"	n	array:configurations.0.args
0	.vscode/launch.json	/^    {$/;"	o	array:configurations
0	.vscode/settings.json	/^    "*",$/;"	s	array:C_Cpp_Runner.includeSearch
0	.vscode/settings.json	/^    "**\/build",$/;"	s	array:C_Cpp_Runner.excludeSearch
0	.vscode/settings.json	/^    "-Wall",$/;"	s	array:C_Cpp_Runner.warnings
0	test/.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
1	.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
1	.vscode/settings.json	/^    "**\/*"$/;"	s	array:C_Cpp_Runner.includeSearch
1	.vscode/settings.json	/^    "**\/build\/**",$/;"	s	array:C_Cpp_Runner.excludeSearch
1	.vscode/settings.json	/^    "-Wextra",$/;"	s	array:C_Cpp_Runner.warnings
1	test/.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
2	.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
2	.vscode/settings.json	/^    "**\/.*",$/;"	s	array:C_Cpp_Runner.excludeSearch
2	.vscode/settings.json	/^    "-Wpedantic",$/;"	s	array:C_Cpp_Runner.warnings
2	test/.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
3	.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
3	.vscode/settings.json	/^    "**\/.*\/**",$/;"	s	array:C_Cpp_Runner.excludeSearch
3	.vscode/settings.json	/^    "-Wshadow",$/;"	s	array:C_Cpp_Runner.warnings
3	test/.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	s	array:configurations.Launch.filetypes
4	.vscode/settings.json	/^    "**\/.vscode",$/;"	s	array:C_Cpp_Runner.excludeSearch
4	.vscode/settings.json	/^    "-Wformat=2",$/;"	s	array:C_Cpp_Runner.warnings
5	.vscode/settings.json	/^    "**\/.vscode\/**"$/;"	s	array:C_Cpp_Runner.excludeSearch
5	.vscode/settings.json	/^    "-Wconversion",$/;"	s	array:C_Cpp_Runner.warnings
6	.vscode/settings.json	/^    "-Wnull-dereference",$/;"	s	array:C_Cpp_Runner.warnings
7	.vscode/settings.json	/^    "-Wsign-conversion"$/;"	s	array:C_Cpp_Runner.warnings
BOOK_H	header/book.h	/^#define BOOK_H$/;"	d
CC	Makefile	/^CC = gcc$/;"	m
CC	test/Makefile	/^CC = gcc$/;"	m
CECHO	header/book.h	/^    CECHO,$/;"	e	enum:TERM_bools
CEN	header/book.h	/^    CEN,$/;"	e	enum:mprintf
CFLAGS	Makefile	/^CFLAGS = -g -Wall$/;"	m
CFLAGS	test/Makefile	/^CFLAGS = -g -Wall$/;"	m
C_Cpp_Runner.cCompilerPath	.vscode/settings.json	/^  "C_Cpp_Runner.cCompilerPath": "gcc",$/;"	s
C_Cpp_Runner.cStandard	.vscode/settings.json	/^  "C_Cpp_Runner.cStandard": "",$/;"	s
C_Cpp_Runner.compilerArgs	.vscode/settings.json	/^  "C_Cpp_Runner.compilerArgs": [],$/;"	a
C_Cpp_Runner.cppCompilerPath	.vscode/settings.json	/^  "C_Cpp_Runner.cppCompilerPath": "g++",$/;"	s
C_Cpp_Runner.cppStandard	.vscode/settings.json	/^  "C_Cpp_Runner.cppStandard": "",$/;"	s
C_Cpp_Runner.debuggerPath	.vscode/settings.json	/^  "C_Cpp_Runner.debuggerPath": "gdb",$/;"	s
C_Cpp_Runner.enableWarnings	.vscode/settings.json	/^  "C_Cpp_Runner.enableWarnings": true,$/;"	b
C_Cpp_Runner.excludeSearch	.vscode/settings.json	/^  "C_Cpp_Runner.excludeSearch": [$/;"	a
C_Cpp_Runner.includePaths	.vscode/settings.json	/^  "C_Cpp_Runner.includePaths": [],$/;"	a
C_Cpp_Runner.includeSearch	.vscode/settings.json	/^  "C_Cpp_Runner.includeSearch": [$/;"	a
C_Cpp_Runner.linkerArgs	.vscode/settings.json	/^  "C_Cpp_Runner.linkerArgs": [],$/;"	a
C_Cpp_Runner.msvcBatchPath	.vscode/settings.json	/^  "C_Cpp_Runner.msvcBatchPath": "",$/;"	s
C_Cpp_Runner.useAddressSanitizer	.vscode/settings.json	/^  "C_Cpp_Runner.useAddressSanitizer": false$/;"	b
C_Cpp_Runner.useMsvc	.vscode/settings.json	/^  "C_Cpp_Runner.useMsvc": false,$/;"	b
C_Cpp_Runner.warnings	.vscode/settings.json	/^  "C_Cpp_Runner.warnings": [$/;"	a
C_Cpp_Runner.warningsAsError	.vscode/settings.json	/^  "C_Cpp_Runner.warningsAsError": false,$/;"	b
ERROR_HAND_H	header/error_hand.h	/^#define ERROR_HAND_H$/;"	d
ERR_FNAME	header/error_hand.h	/^    ERR_FNAME,$/;"	e	enum:ErrorCodes
ERR_FOPEN	header/error_hand.h	/^    ERR_FOPEN,$/;"	e	enum:ErrorCodes
ERR_FWRITE	header/error_hand.h	/^    ERR_FWRITE,$/;"	e	enum:ErrorCodes
ERR_GET	header/error_hand.h	/^    ERR_GET,$/;"	e	enum:ErrorCodes
ERR_INPUT	header/error_hand.h	/^    ERR_INPUT,$/;"	e	enum:ErrorCodes
ERR_MALLOC	header/error_hand.h	/^    ERR_MALLOC = 1,$/;"	e	enum:ErrorCodes
ESCAPE_H	header/escape.h	/^#define ESCAPE_H$/;"	d
EXIT	header/error_hand.h	/^#define EXIT /;"	d
ErrorCodes	header/error_hand.h	/^enum ErrorCodes {$/;"	g
HEADER	header/menu.h	/^    HEADER,$/;"	e	enum:menu_types
LEFT	header/book.h	/^    LEFT,$/;"	e	enum:mprintf
Launch	.vimspector.json	/^    "Launch": {$/;"	o	object:configurations
Launch	test/.vimspector.json	/^    "Launch": {$/;"	o	object:configurations
MAIN	header/menu.h	/^    MAIN,$/;"	e	enum:menu_types
MAXCOL	header/book.h	/^#define MAXCOL /;"	d
MAXROW	header/book.h	/^#define MAXROW /;"	d
MENU_H	header/menu.h	/^#define MENU_H$/;"	d
MIMode	.vimspector.json	/^        "MIMode": "gdb"$/;"	s	object:configurations.Launch.configuration
MIMode	.vscode/launch.json	/^      "MIMode": "gdb",$/;"	s	object:configurations.0
MIMode	test/.vimspector.json	/^        "MIMode": "gdb"$/;"	s	object:configurations.Launch.configuration
NOCECHO	header/book.h	/^    NOCECHO,$/;"	e	enum:TERM_bools
NOEXIT	header/error_hand.h	/^#define NOEXIT /;"	d
NORM	header/book.h	/^    NORM,$/;"	e	enum:mprintf
OBJDIR	Makefile	/^OBJDIR = ~\/code\/main\/object$/;"	m
OBJDIR	test/Makefile	/^OBJDIR = ~\/code\/test\/object$/;"	m
OBJS	Makefile	/^OBJS = $(patsubst $(SRCDIR)\/%.c, $(OBJDIR)\/%.o, $(SRCS))$/;"	m
OBJS	test/Makefile	/^OBJS = $(patsubst $(SRCDIR)\/%.c, $(OBJDIR)\/%.o, $(SRCS))$/;"	m
OFFSET_LEN_AUTHOR	header/book.h	/^#define OFFSET_LEN_AUTHOR /;"	d
OFFSET_LEN_RELDAT	header/book.h	/^#define OFFSET_LEN_RELDAT /;"	d
OFFSET_LEN_TITLE	header/book.h	/^#define OFFSET_LEN_TITLE /;"	d
OFFSET_READ	header/book.h	/^#define OFFSET_READ /;"	d
OFFSET_RELDAT	header/book.h	/^#define OFFSET_RELDAT /;"	d
RIGHT	header/book.h	/^    RIGHT,$/;"	e	enum:mprintf
SRCDIR	Makefile	/^SRCDIR = ~\/code\/main\/source$/;"	m
SRCDIR	test/Makefile	/^SRCDIR = ~\/code\/main\/source$/;"	m
SRCS	Makefile	/^SRCS = main.c source\/utilities.c source\/error_hand.c source\/escape.c source\/unix_term.c sour/;"	m
SRCS	test/Makefile	/^SRCS = ..\/main.c ..\/source\/utilities.c ..\/source\/error_hand.c ..\/source\/escape.c ..\/sour/;"	m
TARGET	Makefile	/^TARGET = .\/debug\/a.out$/;"	m
TARGET	test/Makefile	/^TARGET = .\/debug\/a.out$/;"	m
TERM_bools	header/book.h	/^enum TERM_bools {$/;"	g
UNIX_TERM_H	header/unix_term.h	/^#define UNIX_TERM_H$/;"	d
__anon50e7c97e0108	header/book.h	/^typedef struct {$/;"	s
__anon50e7c97e0208	header/book.h	/^typedef struct {$/;"	s
__anon50e7c97e0308	header/book.h	/^typedef struct {$/;"	s
__anon50e7c97e0408	header/book.h	/^typedef struct {$/;"	s
__anon69db31880108	header/menu.h	/^typedef struct {$/;"	s
adapter	.vimspector.json	/^      "adapter": "vscode-cpptools",$/;"	s	object:configurations.Launch
adapter	test/.vimspector.json	/^      "adapter": "vscode-cpptools",$/;"	s	object:configurations.Launch
args	.vimspector.json	/^        "args": [],$/;"	a	object:configurations.Launch.configuration
args	.vscode/launch.json	/^      "args": [2],$/;"	a	object:configurations.0
args	test/.vimspector.json	/^        "args": [],$/;"	a	object:configurations.Launch.configuration
author	header/book.h	/^    uint8_t *author;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint8_t *
author_len	header/book.h	/^    uint32_t author_len;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint32_t
book_file_read	source/utilities.c	/^bool book_file_read(FILE **fp, book_t **book, char *path) {$/;"	f	typeref:typename:bool
book_init	source/utilities.c	/^bool book_init(book_t **book, term_t **term) {$/;"	f	typeref:typename:bool
book_t	header/book.h	/^}book_t;$/;"	t	typeref:struct:__anon50e7c97e0308
cStandard	.vscode/c_cpp_properties.json	/^      "cStandard": "${default}",$/;"	s	object:configurations.0
chapter_len	header/book.h	/^    size_t chapter_len;$/;"	m	struct:__anon50e7c97e0208	typeref:typename:size_t
chapter_num	header/book.h	/^    size_t chapter_num;$/;"	m	struct:__anon50e7c97e0308	typeref:typename:size_t
chapter_t	header/book.h	/^}chapter_t;$/;"	t	typeref:struct:__anon50e7c97e0208
chapters	header/book.h	/^    chapter_t *chapters;$/;"	m	struct:__anon50e7c97e0308	typeref:typename:chapter_t *
clean	Makefile	/^clean:$/;"	t
clean	test/Makefile	/^clean:$/;"	t
clear	source/utilities.c	/^void clear() {$/;"	f	typeref:typename:void
compilerArgs	.vscode/c_cpp_properties.json	/^      "compilerArgs": [$/;"	a	object:configurations.0
compilerPath	.vscode/c_cpp_properties.json	/^      "compilerPath": "\/usr\/bin\/gcc",$/;"	s	object:configurations.0
configuration	.vimspector.json	/^      "configuration": {$/;"	o	object:configurations.Launch
configuration	test/.vimspector.json	/^      "configuration": {$/;"	o	object:configurations.Launch
configurations	.vimspector.json	/^  "configurations": {$/;"	o
configurations	.vscode/c_cpp_properties.json	/^  "configurations": [$/;"	a
configurations	.vscode/launch.json	/^  "configurations": [$/;"	a
configurations	test/.vimspector.json	/^  "configurations": {$/;"	o
cppStandard	.vscode/c_cpp_properties.json	/^      "cppStandard": "${default}",$/;"	s	object:configurations.0
current	header/unix_term.h	/^static struct termios current, old;$/;"	v	typeref:struct:termios
cwd	.vimspector.json	/^        "cwd": "${workspaceRoot}",$/;"	s	object:configurations.Launch.configuration
cwd	.vscode/launch.json	/^      "cwd": "\/home\/victor\/code\/main",$/;"	s	object:configurations.0
cwd	test/.vimspector.json	/^        "cwd": "${workspaceRoot}",$/;"	s	object:configurations.Launch.configuration
def_col_len	header/book.h	/^    uint8_t def_col_len; \/\/ from 10 to 40$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint8_t
def_row_len	header/book.h	/^    uint8_t def_row_len; \/\/ from 10 to 100$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint8_t
defpos	header/menu.h	/^    uint32_t defpos[2];$/;"	m	struct:__anon69db31880108	typeref:typename:uint32_t[2]
description	.vscode/launch.json	/^          "description": "Enable pretty-printing for gdb",$/;"	s	object:configurations.0.setupCommands.0
environment	.vimspector.json	/^        "environment": [],$/;"	a	object:configurations.Launch.configuration
environment	test/.vimspector.json	/^        "environment": [],$/;"	a	object:configurations.Launch.configuration
errorMessages	source/error_hand.c	/^const char *errorMessages[][2] = {$/;"	v	typeref:typename:const char * [][2]
externalConsole	.vimspector.json	/^        "externalConsole": true,$/;"	b	object:configurations.Launch.configuration
externalConsole	.vscode/launch.json	/^      "externalConsole": false,$/;"	b	object:configurations.0
externalConsole	test/.vimspector.json	/^        "externalConsole": true,$/;"	b	object:configurations.Launch.configuration
filesize	header/book.h	/^    uint64_t filesize;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint64_t
filetypes	.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	a	object:configurations.Launch
filetypes	test/.vimspector.json	/^      "filetypes": [ "cpp", "c", "objc", "rust" ], $/;"	a	object:configurations.Launch
get_YX	source/escape.c	/^uint32_t *get_YX() {$/;"	f	typeref:typename:uint32_t *
get_maxYX	source/escape.c	/^uint32_t *get_maxYX() {$/;"	f	typeref:typename:uint32_t *
getch	source/unix_term.c	/^int32_t getch() {$/;"	f	typeref:typename:int32_t
getch_	source/unix_term.c	/^int32_t getch_(uint8_t echo) {$/;"	f	typeref:typename:int32_t
getcha	source/unix_term.c	/^int32_t getcha() {$/;"	f	typeref:typename:int32_t
getchae	source/unix_term.c	/^int32_t getchae() {$/;"	f	typeref:typename:int32_t
getche	source/unix_term.c	/^int32_t getche() {$/;"	f	typeref:typename:int32_t
header	header/book.h	/^    header_t *header;$/;"	m	struct:__anon50e7c97e0308	typeref:typename:header_t *
header_file_write	source/utilities.c	/^void header_file_write(FILE *fp, header_t *header) {$/;"	f	typeref:typename:void
header_menu	source/menu.c	/^void header_menu(FILE *fp, header_t *header, term_t *term) {$/;"	f	typeref:typename:void
header_t	header/book.h	/^}header_t;$/;"	t	typeref:struct:__anon50e7c97e0108
hide_cur	source/utilities.c	/^void hide_cur() {$/;"	f	typeref:typename:void
ignoreFailures	.vscode/launch.json	/^          "ignoreFailures": true$/;"	b	object:configurations.0.setupCommands.0
includePath	.vscode/c_cpp_properties.json	/^      "includePath": [$/;"	a	object:configurations.0
info	header/menu.h	/^    uint32_t info;$/;"	m	struct:__anon69db31880108	typeref:typename:uint32_t
intelliSenseMode	.vscode/c_cpp_properties.json	/^      "intelliSenseMode": "linux-gcc-x64",$/;"	s	object:configurations.0
itemchoice	header/menu.h	/^    uint32_t itemchoice;$/;"	m	struct:menu_t	typeref:typename:uint32_t
itemcnt	header/menu.h	/^    uint32_t itemcnt;$/;"	m	struct:menu_t	typeref:typename:uint32_t
items	header/menu.h	/^    uint8_t **items;$/;"	m	struct:menu_t	typeref:typename:uint8_t **
magic_num	header/book.h	/^    uint32_t magic_num;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint32_t
main	main.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
main	test/test.c	/^int main() {$/;"	f	typeref:typename:int
menu_close	source/menu.c	/^void menu_close(menu_t *menu) {$/;"	f	typeref:typename:void
menu_init	source/menu.c	/^menu_t *menu_init(uint32_t menu_type) {$/;"	f	typeref:typename:menu_t *
menu_print	source/menu.c	/^void menu_print(menu_t *menu) {$/;"	f	typeref:typename:void
menu_t	header/menu.h	/^typedef struct menu_t{$/;"	s
menu_t	header/menu.h	/^}menu_t;$/;"	t	typeref:struct:menu_t
menu_types	header/menu.h	/^enum menu_types {$/;"	g
menus	header/menu.h	/^    struct menu_t **menus;$/;"	m	struct:menu_t	typeref:struct:menu_t **
miDebuggerPath	.vscode/launch.json	/^      "miDebuggerPath": "gdb",$/;"	s	object:configurations.0
move_cursor	source/escape.c	/^void move_cursor(uint32_t rows, uint32_t cols) {$/;"	f	typeref:typename:void
mprintf	header/book.h	/^enum mprintf {$/;"	g
mprintf	source/utilities.c	/^uint32_t mprintf(uint32_t y, uint32_t x, uint8_t pos, char *str, ...) {$/;"	f	typeref:typename:uint32_t
mprintfh	source/utilities.c	/^uint32_t mprintfh(uint32_t y, uint32_t x, uint8_t pos, char *str, ...) {$/;"	f	typeref:typename:uint32_t
name	.vscode/c_cpp_properties.json	/^      "name": "linux-gcc-x64",$/;"	s	object:configurations.0
name	.vscode/launch.json	/^      "name": "C\/C++ Runner: Debug Session",$/;"	s	object:configurations.0
old	header/unix_term.h	/^static struct termios current, old;$/;"	v	typeref:struct:termios
open_file_menu	main.c	/^void open_file_menu(FILE **fp, book_t **book) {$/;"	f	typeref:typename:void
padding	header/menu.h	/^    uint32_t padding;$/;"	m	struct:menu_t	typeref:typename:uint32_t
print_error	source/error_hand.c	/^void print_error(uint32_t errorCode, char *varName, bool IFEXIT) {$/;"	f	typeref:typename:void
program	.vimspector.json	/^        "program": "${workspaceRoot}\/debug\/a.out",$/;"	s	object:configurations.Launch.configuration
program	.vscode/launch.json	/^      "program": "\/home\/victor\/code\/main\/build\/Debug\/outDebug",$/;"	s	object:configurations.0
program	test/.vimspector.json	/^        "program": "${workspaceRoot}\/debug\/a.out",$/;"	s	object:configurations.Launch.configuration
quit	source/utilities.c	/^bool quit(book_t **book, term_t **term) {$/;"	f	typeref:typename:bool
read_string	source/utilities.c	/^uint32_t read_string(uint8_t **string, uint8_t echo) {$/;"	f	typeref:typename:uint32_t
release_date	header/book.h	/^    uint8_t *release_date;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint8_t *
release_date_len	header/book.h	/^    uint32_t release_date_len;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint32_t
request	.vimspector.json	/^        "request": "launch",$/;"	s	object:configurations.Launch.configuration
request	.vscode/launch.json	/^      "request": "launch",$/;"	s	object:configurations.0
request	test/.vimspector.json	/^        "request": "launch",$/;"	s	object:configurations.Launch.configuration
reset_input_mode	source/utilities.c	/^void reset_input_mode () {$/;"	f	typeref:typename:void
reset_term	source/utilities.c	/^void reset_term(){$/;"	f	typeref:typename:void
save_t_attributes	source/utilities.c	/^void save_t_attributes() {$/;"	f	typeref:typename:void
set_input_mode	source/utilities.c	/^void set_input_mode (term_t *term, uint32_t flag) {$/;"	f	typeref:typename:void
setupCommands	.vscode/launch.json	/^      "setupCommands": [$/;"	a	object:configurations.0
show_cur	source/utilities.c	/^void show_cur() {$/;"	f	typeref:typename:void
state	header/menu.h	/^    state_t *state;$/;"	m	struct:menu_t	typeref:typename:state_t *
state_t	header/menu.h	/^}state_t;$/;"	t	typeref:struct:__anon69db31880108
stopAtEntry	.vscode/launch.json	/^      "stopAtEntry": false,$/;"	b	object:configurations.0
t_echo	header/book.h	/^    struct termios *t_echo;$/;"	m	struct:__anon50e7c97e0408	typeref:struct:termios *
t_noecho	header/book.h	/^    struct termios *t_noecho;$/;"	m	struct:__anon50e7c97e0408	typeref:struct:termios *
t_save	source/utilities.c	/^struct termios t_save;$/;"	v	typeref:struct:termios
term_t	header/book.h	/^} term_t;$/;"	t	typeref:struct:__anon50e7c97e0408
termsize	header/menu.h	/^    uint32_t *termsize;$/;"	m	struct:__anon69db31880108	typeref:typename:uint32_t *
text	.vscode/launch.json	/^          "text": "-enable-pretty-printing",$/;"	s	object:configurations.0.setupCommands.0
text	header/book.h	/^    char *text;$/;"	m	struct:__anon50e7c97e0208	typeref:typename:char *
title	header/book.h	/^    uint8_t *title;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint8_t *
title_len	header/book.h	/^    uint32_t title_len;$/;"	m	struct:__anon50e7c97e0108	typeref:typename:uint32_t
type	.vscode/launch.json	/^      "type": "lldb",$/;"	s	object:configurations.0
update_state	source/menu.c	/^state_t *update_state() {$/;"	f	typeref:typename:state_t *
version	.vscode/c_cpp_properties.json	/^  "version": 4$/;"	n
version	.vscode/launch.json	/^  "version": "0.2.0",$/;"	s
